@{
    ViewData["Title"] = "URL Shortener";
}

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white text-center py-3">
                    <h1 class="h3 mb-0">URL Shortener</h1>
                </div>
                <div class="card-body p-4">
                    <form id="urlShortenerForm">
                        @Html.AntiForgeryToken()

                        <!-- Original URL Input -->
                        <div class="mb-4">
                            <label for="originalUrl" class="form-label">URL to Shorten *</label>
                            <input type="url"
                                   class="form-control form-control-lg"
                                   id="originalUrl"
                                   name="originalUrl"
                                   required
                                   placeholder="https://example.com">
                            <div class="invalid-feedback" id="urlError"></div>
                        </div>

                        <!-- Alert Container -->
                        <div class="alert d-none" role="alert" id="alertContainer">
                            <div class="d-flex align-items-center">
                                <div class="flex-shrink-0">
                                    <i class="bi" id="alertIcon"></i>
                                </div>
                                <div class="ms-2" id="alertMessage"></div>
                            </div>
                        </div>

                        <!-- Submit Button -->
                        <button type="submit"
                                class="btn btn-primary btn-lg w-100"
                                id="submitButton">
                            Shorten URL
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('urlShortenerForm');
            const submitButton = document.getElementById('submitButton');
            const alertContainer = document.getElementById('alertContainer');
            const alertMessage = document.getElementById('alertMessage');
            const alertIcon = document.getElementById('alertIcon');
            const urlError = document.getElementById('urlError');
            const originalUrlInput = document.getElementById('originalUrl');

            function showAlert(message, type = 'error') {
                alertContainer.className = `alert ${type === 'error' ? 'alert-danger' : 'alert-success'} d-flex align-items-center`;
                alertIcon.className = `bi ${type === 'error' ? 'bi-exclamation-circle' : 'bi-check-circle'} me-2`;
                alertMessage.textContent = message;
                alertContainer.classList.remove('d-none');
            }

            function validateUrl(url) {
                try {
                    new URL(url);
                    return true;
                } catch {
                    return false;
                }
            }

            form.addEventListener('submit', async function (e) {
                e.preventDefault();

                // Reset previous error states
                alertContainer.classList.add('d-none');
                urlError.textContent = '';
                originalUrlInput.classList.remove('is-invalid');

                const originalUrl = originalUrlInput.value.trim();

                // Validate URL
                if (!originalUrl) {
                    originalUrlInput.classList.add('is-invalid');
                    urlError.textContent = 'URL is required';
                    return;
                }

                if (!validateUrl(originalUrl)) {
                    originalUrlInput.classList.add('is-invalid');
                    urlError.textContent = 'Please enter a valid URL (including http:// or https://)';
                    return;
                }

                // Disable submit button and show loading state
                submitButton.disabled = true;
                submitButton.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Shortening...';

                try {
                    const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                    const headers = {
                        'Content-Type': 'application/json'
                    };

                    if (tokenElement) {
                        headers['RequestVerificationToken'] = tokenElement.value;
                    }

                    const response = await fetch('/api/url/shorten', {
                        method: 'POST',
                        headers: headers,
                        body: JSON.stringify({ originalUrl })
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || `Error: ${response.status}`);
                    }

                    const data = await response.json();
                    showAlert('URL shortened successfully!', 'success');

                    // Display the shortened URL
                    const shortenedUrl = data.shortenedUrl;
                    alertMessage.innerHTML = `Shortened URL: <a href="${shortenedUrl}" class="alert-link" target="_blank">${shortenedUrl}</a>`;

                    // Clear form
                    form.reset();

                } catch (error) {
                    showAlert(error.message || 'An error occurred while shortening the URL');
                } finally {
                    submitButton.disabled = false;
                    submitButton.innerHTML = 'Shorten URL';
                }
            });
        });
    </script>
}
